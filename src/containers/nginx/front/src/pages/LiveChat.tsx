// generated by AI for (TO TEST WITH BACKEND)

import { useState, useEffect } from 'react';
import { useSocket, useSocketEvent } from '@/contexts/SocketContext';

interface Message {
  id: string;
  text: string;
  userId: string;
  timestamp: number;
}

export default function LiveChat() {
  const { socket, isConnected } = useSocket();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Authenticate on mount
  useEffect(() => {
    if (!socket || !isConnected) return;

    // Get token from cookie or localStorage
    const token = document.cookie
      .split('; ')
      .find(row => row.startsWith('token='))
      ?.split('=')[1];

    if (token) {
      socket.emit('authenticate', token);
    }
  }, [socket, isConnected]);

  // Listen for authentication success
  useSocketEvent('authenticated', (data) => {
    console.log('Authenticated as user:', data.userId);
    setIsAuthenticated(true);
  });

  // Listen for authentication errors
  useSocketEvent('auth-error', (data) => {
    console.error('Auth error:', data.message);
    setIsAuthenticated(false);
    // Redirect to login
    window.location.href = '/login';
  });

  // Listen for new messages
  useSocketEvent<Message>('new-message', (message) => {
    setMessages(prev => [...prev, message]);
  });

  // Listen for broadcast messages
  useSocketEvent('broadcast', (data) => {
    console.log('Broadcast received:', data);
  });

  // Listen for notifications
  useSocketEvent('notification', (data) => {
    console.log('Notification:', data);
    // Show toast notification
  });

  // Send message function
  const sendMessage = () => {
    if (!socket || !isConnected || !isAuthenticated || !inputText.trim()) {
      return;
    }

    socket.emit('send-message', {
      roomId: 'general',
      message: inputText
    });

    setInputText('');
  };

  // Join room on mount
  useEffect(() => {
    if (!socket || !isConnected || !isAuthenticated) return;

    socket.emit('join-room', 'general');

    return () => {
      socket.emit('leave-room', 'general');
    };
  }, [socket, isConnected, isAuthenticated]);

  if (!isConnected) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 dark:border-white mx-auto"></div>
          <p className="mt-4 text-gray-600 dark:text-gray-400">
            Connecting to chat server...
          </p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <p className="text-gray-600 dark:text-gray-400">
            Authenticating...
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-screen">
      {/* Header */}
      <div className="bg-gray-100 dark:bg-gray-800 p-4 border-b">
        <h1 className="text-xl font-bold">Live Chat</h1>
        <p className="text-sm text-gray-600 dark:text-gray-400">
          Status: <span className="text-green-500">Connected</span>
        </p>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-2">
        {messages.map((message) => (
          <div
            key={message.id}
            className="p-3 bg-gray-100 dark:bg-gray-800 rounded-lg"
          >
            <div className="text-sm text-gray-500 dark:text-gray-400">
              User {message.userId}
            </div>
            <div className="mt-1">{message.text}</div>
            <div className="text-xs text-gray-400 mt-1">
              {new Date(message.timestamp).toLocaleTimeString()}
            </div>
          </div>
        ))}
      </div>

      {/* Input */}
      <div className="bg-gray-100 dark:bg-gray-800 p-4 border-t">
        <div className="flex gap-2">
          <input
            type="text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            placeholder="Type a message..."
            className="flex-1 px-4 py-2 rounded-lg bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            onClick={sendMessage}
            disabled={!inputText.trim()}
            className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Send
          </button>
        </div>
      </div>
    </div>
  );
}
